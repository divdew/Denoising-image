# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HtRqF2YLYgex2SXrUKVXrihUqlY_4Z8V
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from skimage.util import random_noise

from glob import glob
from PIL import Image, ImageOps
import matplotlib.pyplot as plt
import keras
from keras import layers
from keras.layers import Input,Conv2D,Concatenate
from keras.models import Model
import tensorflow as tf

# Load images from a directory
def load_images_from_folder(folder, target_size=(128, 128)):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE)
        if img is not None:
            img = cv2.resize(img, target_size)
            images.append(img)
    return np.array(images)

# Add noise to images
def add_noise(images, noise_type='gaussian', var=0.01):
    noisy_images = []
    for image in images:
        noisy_image = random_noise(image, mode=noise_type, var=var)
        noisy_images.append(noisy_image)
    return np.array(noisy_images)

image_folder = '/content/drive/MyDrive/Train/Train/low'
images = load_images_from_folder(image_folder) / 255.0

# Split into training and test sets
train_images, test_images = train_test_split(images, test_size=0.2, random_state=42)

# Add noise to the images
noisy_train_images = add_noise(train_images)
noisy_test_images = add_noise(test_images)

# Display a sample image and its noisy version
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(train_images[0], cmap='gray')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Noisy Image')
plt.imshow(noisy_train_images[0], cmap='gray')
plt.axis('off')

plt.show()

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D

def build_denoising_model(input_shape):
    input_img = Input(shape=input_shape)

    x = Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)
    x = MaxPooling2D((2, 2), padding='same')(x)
    x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
    x = MaxPooling2D((2, 2), padding='same')(x)
    x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)

    x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
    x = UpSampling2D((2, 2))(x)
    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
    x = UpSampling2D((2, 2))(x)
    x = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

    return Model(input_img, x)

input_shape = (128, 128, 1)
model = build_denoising_model(input_shape)
model.compile(optimizer='adam', loss='mse')
model.summary()

# Expand dimensions to match the input shape (128, 128, 1)
train_images_expanded = np.expand_dims(train_images, axis=-1)
noisy_train_images_expanded = np.expand_dims(noisy_train_images, axis=-1)

# Train the model
history = model.fit(noisy_train_images_expanded, train_images_expanded, epochs=20, batch_size=32, validation_split=0.1)

from skimage.metrics import peak_signal_noise_ratio as psnr, mean_squared_error as mse#, mean_absolute_error as mae

# Evaluate on training set
denoised_train_images = model.predict(noisy_train_images_expanded)

mse_score = mse(train_images, denoised_train_images.squeeze())
psnr_score = psnr(train_images, denoised_train_images.squeeze())
#mae_score = mae(train_images, denoised_train_images.squeeze())

print(f'MSE: {mse_score}')
print(f'PSNR: {psnr_score}')
#print(f'MAE: {mae_score}')

def show_images(original, denoised, num_images=5):
    plt.figure(figsize=(20, 10))
    for i in range(num_images):
        # Original image
        plt.subplot(2, num_images, i + 1)
        plt.imshow(original[i], cmap='gray')
        plt.title("Noised")
        plt.axis('off')

        # Denoised image
        plt.subplot(2, num_images, i + 1 + num_images)
        plt.imshow(denoised[i].squeeze(), cmap='gray')
        plt.title("Denoised")
        plt.axis('off')
    plt.show()

# Predict denoised images on test set
noisy_test_images_expanded = np.expand_dims(noisy_test_images, axis=-1)
denoised_test_images = model.predict(noisy_test_images_expanded)

# Save the denoised images to the ./test/predicted/ folder
output_folder = './test/predicted/'
os.makedirs(output_folder, exist_ok=True)

for i in range(len(denoised_test_images)):
    output_path = os.path.join(output_folder, f'{i}.png')
    cv2.imwrite(output_path, (denoised_test_images[i].squeeze() * 255).astype(np.uint8))

# Save the trained model weights
model.save_weights('denoising_model.h5')